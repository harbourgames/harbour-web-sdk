(function () {
  'use strict';

  function asyncSeries(list, callback) {
    function _run(index, list, callback) {
      var item = list[index];
      if (item) {
        item(function (err) {
          if (err) {
            callback(err);
          } else {
            _run(index + 1, list, callback);
          }
        });
      } else {
        callback();
      }
    }
    _run(0, list, callback);
  }

  function resolveStyles() {
    var obj = {};

    function _addStyle(arg) {
      if (Array.isArray(arg)) {
        arg.forEach(_addStyle);
      } else {
        for (var key in arg) {
          obj[key] = arg[key];
        }
      }
    }

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _addStyle(args);

    var s = "";
    for (var key in obj) {
      var val = obj[key];
      s += key + ":" + val + ";";
    }
    return s;
  }

  var payments = {
    onReady: onReady,
    getCatalogAsync: getCatalogAsync,
    purchaseAsync: purchaseAsync,
    consumePurchaseAsync: consumePurchaseAsync
  };

  function onReady() {}
  function getCatalogAsync() {}
  function purchaseAsync() {}
  function consumePurchaseAsync() {}

  var UI = {
    addLoader: addLoader,
    removeLoader: removeLoader,
    setLoaderText: setLoaderText,
    addLoginButton: addLoginButton,
    removeLoginButton: removeLoginButton
  };

  var styles = {
    loader: {
      position: "absolute",
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      background: "black center center no-repeat",
      "background-size": "cover",

      display: "flex",
      "flex-direction": "column",
      "justify-content": "center",
      "align-items": "center"
    },
    cover: {
      "z-index": "0",
      position: "absolute",
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      background: "rgba(0,0,0,0.5)",

      display: "flex",
      "flex-direction": "column",
      "justify-content": "center",
      "align-items": "center"
    },
    middleLoader: {
      "z-index": "1",
      position: "relative",
      width: "100px",
      height: "100px",
      "border-radius": "50%",
      overflow: "hidden"
    },
    icon: {
      position: 'absolute',
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      margin: "10px",
      "border-radius": "50%",
      background: "#333 center center no-repeat",
      "background-size": "cover"
    },
    spinner: {
      position: 'absolute',
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      border: "10px solid",
      "border-color": "blue black blue black",
      "border-radius": "50%",
      animation: "harbour-loader-spinner 2s linear infinite"
    },
    loaderText: {
      "z-index": "1",
      "margin-top": "20px",
      color: "white",
      "font-size": "16px",
      "font-weight": "bold",
      "font-family": "sans-serif"
    },
    loginButton: {
      position: "absolute",
      bottom: "60px",
      "margin-left": "auto",
      "margin-right": "auto",
      height: "40px",
      width: "236px",

      background: "#4267b2",
      "border-radius": "4px",
      cursor: "pointer",

      display: "flex",
      "flex-direction": "row",
      "justify-content": "center",
      "align-items": "center"
    },
    loginIcon: {
      position: 'absolute',
      top: "8px",
      left: "10px",
      width: "24px",
      height: "24px"
    },
    loginText: {
      "margin-left": "24px",
      "margin-top": "2px",
      color: "white",
      "font-family": "Helvetica, Arial, sans-serif",
      "font-size": "16px"
    }
  };

  function addLoader(opts) {
    var loader_style = void 0;
    if (opts && opts.backgroundImage) {
      var _style = { "background-image": "url(" + opts.backgroundImage + ")" };
      loader_style = resolveStyles([styles.loader, _style]);
    } else {
      loader_style = resolveStyles(styles.loader);
    }
    var icon_style = void 0;
    if (opts && opts.iconImage) {
      var _style2 = { "background-image": "url(" + opts.iconImage + ")" };
      icon_style = resolveStyles([styles.icon, _style2]);
    } else {
      icon_style = resolveStyles(styles.icon);
    }

    var html = "<div id=\"harbour-loader\" style=\"" + loader_style + "\">\n  <div style=\"" + resolveStyles(styles.cover) + "\"></div>\n    <div style=\"" + resolveStyles(styles.middleLoader) + "\">\n      <div style=\"" + resolveStyles(styles.spinner) + "\"></div>\n      <div style=\"" + icon_style + "\"></div>\n    </div>\n    <div id=\"harbour-loader-text\" style=\"" + resolveStyles(styles.loaderText) + "\">0% Loaded</div>\n\n</div>";

    var temp = document.createElement("div");
    temp.innerHTML = html;

    document.body.appendChild(temp.firstChild);

    var css = "@keyframes harbour-loader-spinner {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n";
    var style = document.createElement('style');
    style.type = 'text/css';
    style.appendChild(document.createTextNode(css));
    document.head.appendChild(style);
  }

  function removeLoader() {
    var el = document.getElementById("harbour-loader");
    document.body.removeChild(el);
  }

  function setLoaderText(text) {
    var text_el = document.getElementById("harbour-loader-text");
    text_el.innerText = text;
  }
  function addLoginButton() {
    var loader = document.getElementById("harbour-loader");

    var html = "<div id=\"harbour-loader-login-button\" style=\"" + resolveStyles(styles.loginButton) + "\" onclick=\"window.HarbourSDK.player.onLoginButtonPress()\">\n  <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"" + resolveStyles(styles.loginIcon) + "\" viewBox=\"0 0 216 216\" color=\"#FFFFFF\">\n    <path fill=\"#FFFFFF\" d=\"\n            M204.1 0H11.9C5.3 0 0 5.3 0 11.9v192.2c0 6.6 5.3 11.9 11.9\n            11.9h103.5v-83.6H87.2V99.8h28.1v-24c0-27.9 17-43.1 41.9-43.1\n            11.9 0 22.2.9 25.2 1.3v29.2h-17.3c-13.5 0-16.2 6.4-16.2\n            15.9v20.8h32.3l-4.2 32.6h-28V216h55c6.6 0 11.9-5.3\n            11.9-11.9V11.9C216 5.3 210.7 0 204.1 0z\">\n    </path>\n  </svg>\n  <div style=\"" + resolveStyles(styles.loginText) + "\">Continue With Facebook</div>\n</div>";

    var temp = document.createElement("div");
    temp.innerHTML = html;

    loader.appendChild(temp.firstChild);
  }
  function removeLoginButton() {
    var login = document.getElementById("harbour-loader-login-button");
    var loader = document.getElementById("harbour-loader");

    login && loader && loader.removeChild(login);
  }

  var player = {
    isLoggedIn: isLoggedIn,
    checkLoginStatus: checkLoginStatus,
    login: login,
    onLoginButtonPress: onLoginButtonPress,
    setLoginCallback: setLoginCallback,

    getID: getID,
    getName: getName,
    getPhoto: getPhoto,
    getEmail: getEmail,
    getDataAsync: getDataAsync,
    setDataAsync: setDataAsync,
    getStatsAsync: getStatsAsync,
    setStatsAsync: setStatsAsync,
    incrementStatsAsync: incrementStatsAsync,
    flushDataAsync: flushDataAsync,
    getConnectedPlayersAsync: getConnectedPlayersAsync,
    getSignedPlayerInfoAsync: getSignedPlayerInfoAsync,
    canSubscribeBotAsync: canSubscribeBotAsync,
    subscribeBotAsync: subscribeBotAsync
  };

  var g_isLoggedIn = false;
  var g_uid = void 0;
  var g_email = void 0;
  var g_name = void 0;
  var g_photoUrl = void 0;
  var g_signedRequest = void 0;
  var g_loginSuccessCallback = void 0;

  function isLoggedIn() {
    return g_isLoggedIn;
  }
  function checkLoginStatus(done) {
    window.FB.getLoginStatus(function (response) {
      if (response.status === "connected") {
        g_uid = response.authResponse.userID;
        g_signedRequest = response.authResponse.signedRequest;
        _postLogin(done);
      } else {
        g_isLoggedIn = false;
        done();
      }
    });
  }

  function login() {
    var opts = { scope: "email" };

    window.FB.login(function (response) {
      if (response && response.status === "connected") {
        g_uid = response.authResponse.userID;
        _postLogin();
      }
    }, opts);
  }
  function _postLogin(done) {
    var fields = "email,name,picture.type(large)";

    window.FB.api("/me", { fields: fields }, function (response) {
      if (!response || response.error) {
        console.error("FB login failed:", response);
      } else {
        g_email = response.email;
        g_name = response.name;
        g_photoUrl = _getUrl(response.picture);
        g_isLoggedIn = true;
        g_loginSuccessCallback && g_loginSuccessCallback();
        g_loginSuccessCallback = null;
        UI.removeLoginButton();
      }
      done && done();
    });
  }

  function onLoginButtonPress() {
    login();
  }
  function setLoginCallback(cb) {
    g_loginSuccessCallback = cb;
  }

  function getID() {
    return g_uid;
  }
  function getName() {
    return g_name;
  }
  function getPhoto() {
    return g_photoUrl;
  }
  function getEmail() {
    return g_email;
  }
  function getDataAsync() {}
  function setDataAsync() {}
  function getStatsAsync() {}
  function setStatsAsync() {}
  function incrementStatsAsync() {}
  function flushDataAsync() {}
  function getConnectedPlayersAsync() {
    return Promise.reject({ code: "CLIENT_UNSUPPORTED_OPERATION" });
  }
  function getSignedPlayerInfoAsync() {
    return Promise.resolve({
      getSignature: function getSignature() {
        return g_signedRequest;
      },
      getPlayerID: getID
    });
  }
  function canSubscribeBotAsync() {
    return Promise.reject({ code: "CLIENT_UNSUPPORTED_OPERATION" });
  }
  function subscribeBotAsync() {
    return Promise.reject({ code: "CLIENT_UNSUPPORTED_OPERATION" });
  }

  function _getUrl(obj) {
    return obj && obj.data && obj.data.url;
  }

  var context = {
    getID: getID$1,
    chooseAsync: chooseAsync,
    switchAsync: switchAsync,
    createAsync: createAsync,
    getType: getType,
    isSizeBetween: isSizeBetween,
    getPlayersAsync: getPlayersAsync
  };

  function getID$1() {
    return null;
  }
  function getType() {
    return "SOLO";
  }
  function chooseAsync() {
    return Promise.reject({ code: "USER_CANCEL" });
  }
  function createAsync() {
    return Promise.reject({ code: "USER_CANCEL" });
  }
  function switchAsync() {
    return Promise.reject({ code: "USER_CANCEL" });
  }
  function isSizeBetween() {
    return null;
  }
  function getPlayersAsync() {
    return Promise.reject({ code: "CLIENT_UNSUPPORTED_OPERATION" });
  }

  var HarbourSDK = {
    player: player,
    context: context,
    payments: payments,
    getLocale: getLocale,
    initializeAsync: initializeAsync,
    setLoadingProgress: setLoadingProgress,
    startGameAsync: startGameAsync,
    quit: quit,
    updateAsync: updateAsync,
    getEntryPointData: getEntryPointData,
    getEntryPointAsync: getEntryPointAsync,
    setSessionData: setSessionData,
    getPlatform: getPlatform,
    getSDKVersion: getSDKVersion,
    getSupportedAPIs: getSupportedAPIs,
    shareAsync: shareAsync,
    switchGameAsync: switchGameAsync,
    logEvent: logEvent,
    onPause: onPause,
    getInterstitialAdAsync: getInterstitialAdAsync,
    getRewardedVideoAsync: getRewardedVideoAsync,
    getLeaderboardAsync: getLeaderboardAsync
  };
  window.HarbourSDK = HarbourSDK;
  window.FBInstant = window.FBInstant || HarbourSDK;

  var g_facebookAppId = void 0;

  function getLocale() {
    var locale = "en-US";
    if (window.navigator) {
      if (window.navigator.language) {
        locale = window.navigator.language;
      } else if (window.navigator.languages && window.navigator.languages[0]) {
        locale = window.navigator.languages[0];
      }
    }
    return locale;
  }
  function initializeAsync(opts) {
    g_facebookAppId = opts.facebookAppId;

    return new Promise(function (resolve) {
      UI.addLoader(opts);
      resolve();

      asyncSeries([_loadFacebookSDK, player.checkLoginStatus], function () {
        if (!player.isLoggedIn()) {
          UI.addLoginButton();
        }
      });
    });
  }
  function setLoadingProgress(progress) {
    return new Promise(function (resolve) {
      UI.setLoaderText(progress.toFixed() + "% Loaded");
      resolve();
    });
  }
  function startGameAsync() {
    return new Promise(function (resolve) {

      function _startGame() {
        UI.removeLoader();
        resolve();
      }

      if (player.isLoggedIn()) {
        _startGame();
      } else {
        UI.setLoaderText("Login to Continue");
        player.setLoginCallback(_startGame);
      }
    });
  }
  function quit() {
    window.close();
  }
  function updateAsync() {
    return Promise.reject({ code: "CLIENT_UNSUPPORTED_OPERATION" });
  }
  function getEntryPointData() {
    return {};
  }
  function getEntryPointAsync() {
    return Promise.resolve(null);
  }
  function setSessionData() {}
  function getPlatform() {
    return "WEB";
  }
  function getSDKVersion() {
    return "6.2";
  }
  function getSupportedAPIs() {
    var api_list = [];
    for (var prop in HarbourSDK) {
      api_list.push(prop);
    }
    for (var _prop in HarbourSDK.player) {
      api_list.push("player." + _prop);
    }
    for (var _prop2 in HarbourSDK.context) {
      api_list.push("context." + _prop2);
    }
    for (var _prop3 in HarbourSDK.payment) {
      api_list.push("payment." + _prop3);
    }
    return api_list;
  }
  function shareAsync() {
    return Promise.reject({ code: "USER_CANCEL" });
  }
  function switchGameAsync() {
    return Promise.reject({ code: "CLIENT_UNSUPPORTED_OPERATION" });
  }
  function logEvent(eventName, value, parameters) {
    console.log("logEvent:", eventName, value, parameters);
    return null;
  }
  function onPause(callback) {
    window.onblur = callback;
  }
  function getInterstitialAdAsync() {
    return Promise.reject({ code: "CLIENT_UNSUPPORTED_OPERATION" });
  }
  function getRewardedVideoAsync() {
    return Promise.reject({ code: "CLIENT_UNSUPPORTED_OPERATION" });
  }
  function getLeaderboardAsync() {
    return Promise.reject({ code: "CLIENT_UNSUPPORTED_OPERATION" });
  }

  function _loadFacebookSDK(done) {
    /* eslint-disable */
    window.fbAsyncInit = function () {
      FB.init({
        appId: g_facebookAppId,
        autoLogAppEvents: false,
        xfbml: false,
        version: "v3.2"
      });
      done();
    };
    (function (d, s, id) {
      var js,
          fjs = d.getElementsByTagName(s)[0];
      if (d.getElementById(id)) {
        return;
      }
      js = d.createElement(s);js.id = id;
      js.src = "https://connect.facebook.net/en_US/sdk.js";
      fjs.parentNode.insertBefore(js, fjs);
    })(document, "script", "facebook-jssdk");
    /* eslint-enable */
  }

}());
//# sourceMappingURL=harbour-web-sdk.min.js.map
